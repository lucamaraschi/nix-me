#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/../lib"

# Source libraries
source "$LIB_DIR/ui.sh"
source "$LIB_DIR/config-builder.sh" 2>/dev/null || true

CONFIG_DIR="${HOME}/.config/nixpkgs"

show_help() {
    print_header "nix-me - Nix Configuration Manager"
    cat << EOF
Usage: nix-me <command> [options]

Commands:
  setup              Run interactive setup wizard
  add <type> <name>  Add packages or features
  remove <type>      Remove packages (coming soon)
  customize          Interactive customization menu
  switch             Apply configuration changes
  update             Update packages
  status             Show system status
  doctor             Diagnose configuration issues
  list               List installed packages

Package Types:
  app <name>         GUI application (Homebrew cask)
  tool <name>        CLI tool (Nix package)

Examples:
  nix-me setup
  nix-me add app spotify
  nix-me add tool jq
  nix-me customize
  nix-me switch
  nix-me doctor

For more help: nix-me <command> --help
EOF
}

cmd_add_app() {
    local app_name="$1"

    if [ -z "$app_name" ]; then
        print_error "Please specify an app name"
        echo "Usage: nix-me add app <name>"
        return 1
    fi

    print_header "Adding GUI Application"
    print_info "Searching for: $app_name"

    # Check if Homebrew is available
    if ! command -v brew &>/dev/null; then
        print_error "Homebrew is not installed"
        return 1
    fi

    # Search Homebrew
    print_info "Searching Homebrew casks..."
    local results=$(brew search --cask "$app_name" 2>/dev/null | grep -v "==>" | head -10)

    if [ -z "$results" ]; then
        print_error "No applications found matching '$app_name'"
        return 1
    fi

    echo ""
    echo "Found applications:"
    local apps_array=()
    local index=1
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            apps_array+=("$line")
            echo "  ${CYAN}${index}${NC}) $line"
            ((index++))
        fi
    done <<< "$results"
    echo "  ${CYAN}0${NC}) Cancel"
    echo ""

    read -p "Select application [0-${#apps_array[@]}]: " selection

    if [ "$selection" -eq 0 ] || [ -z "$selection" ]; then
        print_info "Cancelled"
        return 0
    fi

    if [ "$selection" -lt 1 ] || [ "$selection" -gt "${#apps_array[@]}" ]; then
        print_error "Invalid selection"
        return 1
    fi

    local selected_app="${apps_array[$((selection-1))]}"

    # Add to configuration
    print_info "Adding $selected_app to configuration..."
    echo ""
    print_warn "To add this app, edit:"
    echo "  ${CYAN}$CONFIG_DIR/modules/darwin/homebrew.nix${NC}"
    echo ""
    echo "Add to the casks array:"
    echo "  ${GREEN}\"$selected_app\"${NC}"
    echo ""

    if ask_yes_no "Open homebrew.nix in editor?" "y"; then
        ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/homebrew.nix"
    fi

    echo ""
    if ask_yes_no "Apply changes now?" "y"; then
        cmd_switch
    else
        print_info "Run 'nix-me switch' when ready to apply changes"
    fi
}

cmd_add_tool() {
    local tool_name="$1"

    if [ -z "$tool_name" ]; then
        print_error "Please specify a tool name"
        echo "Usage: nix-me add tool <name>"
        return 1
    fi

    print_header "Adding CLI Tool"
    print_info "Tool: $tool_name"
    echo ""
    print_warn "To add this tool, edit:"
    echo "  ${CYAN}$CONFIG_DIR/modules/darwin/apps.nix${NC}"
    echo ""
    echo "Add to systemPackages:"
    echo "  ${GREEN}$tool_name${NC}"
    echo ""

    if ask_yes_no "Open apps.nix in editor?" "y"; then
        ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/apps.nix"
    fi

    echo ""
    if ask_yes_no "Apply changes now?" "y"; then
        cmd_switch
    else
        print_info "Run 'nix-me switch' when ready to apply changes"
    fi
}

cmd_customize() {
    while true; do
        clear
        print_header "Customization Menu"

        echo "What would you like to customize?"
        echo ""
        echo "  ${CYAN}1${NC}) Add GUI applications"
        echo "  ${CYAN}2${NC}) Add CLI tools"
        echo "  ${CYAN}3${NC}) Edit Fish shell config"
        echo "  ${CYAN}4${NC}) Edit system preferences"
        echo "  ${CYAN}5${NC}) Edit Homebrew config"
        echo "  ${CYAN}6${NC}) Review current configuration"
        echo "  ${CYAN}7${NC}) Apply changes and exit"
        echo "  ${CYAN}0${NC}) Exit without applying"
        echo ""

        read -p "Choice: " choice

        case $choice in
            1)
                echo ""
                read -p "Enter app name to search: " app_name
                cmd_add_app "$app_name"
                read -p "Press Enter to continue..."
                ;;
            2)
                echo ""
                read -p "Enter tool name: " tool_name
                cmd_add_tool "$tool_name"
                read -p "Press Enter to continue..."
                ;;
            3)
                ${EDITOR:-nano} "$CONFIG_DIR/modules/home-manager/fish.nix"
                ;;
            4)
                ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/system.nix"
                ;;
            5)
                ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/homebrew.nix"
                ;;
            6)
                cmd_status
                read -p "Press Enter to continue..."
                ;;
            7)
                echo ""
                if ask_yes_no "Apply configuration changes now?" "y"; then
                    cmd_switch
                fi
                break
                ;;
            0) break ;;
            *) print_error "Invalid choice" ;;
        esac
    done
}

cmd_switch() {
    print_header "Applying Configuration"
    cd "$CONFIG_DIR" || exit 1

    print_info "Building configuration..."
    if make switch; then
        print_success "Configuration applied successfully!"
    else
        print_error "Failed to apply configuration"
        return 1
    fi
}

cmd_update() {
    print_header "Updating System"
    cd "$CONFIG_DIR" || exit 1

    print_info "Updating flake inputs..."
    nix flake update

    echo ""
    if ask_yes_no "Apply updates now?" "y"; then
        cmd_switch
    else
        print_info "Run 'nix-me switch' to apply updates later"
    fi
}

cmd_status() {
    clear
    print_header "System Status"
    echo ""

    print_step "1/5" "Configuration Location"
    if [ -d "$CONFIG_DIR" ]; then
        print_success "Configuration found at: $CONFIG_DIR"
        local branch=$(cd "$CONFIG_DIR" && git branch --show-current 2>/dev/null)
        print_info "Git branch: ${branch:-unknown}"
    else
        print_error "Configuration not found at: $CONFIG_DIR"
    fi
    echo ""

    print_step "2/5" "Nix Generation"
    local current_gen=$(darwin-rebuild --list-generations 2>/dev/null | tail -1 || echo "unknown")
    print_info "Current: $current_gen"
    echo ""

    print_step "3/5" "Nix Store"
    local store_size=$(du -sh /nix/store 2>/dev/null | cut -f1 || echo "unknown")
    print_info "Nix store size: $store_size"
    echo ""

    print_step "4/5" "Installed Packages"
    local brew_count=$(brew list --cask 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    local nix_count=$(nix-env -q 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    print_info "Homebrew casks: $brew_count"
    print_info "Nix packages: $nix_count"
    echo ""

    print_step "5/5" "Recent Changes"
    if [ -d "$CONFIG_DIR/.git" ]; then
        cd "$CONFIG_DIR"
        local last_commit=$(git log -1 --oneline 2>/dev/null || echo "No commits")
        print_info "Last commit: $last_commit"
    fi
}

cmd_doctor() {
    print_header "System Diagnostics"
    echo ""

    # Check Nix installation
    print_step "1/7" "Checking Nix installation"
    if command -v nix &>/dev/null; then
        local nix_version=$(nix --version 2>/dev/null || echo "unknown")
        print_success "Nix is installed: $nix_version"
    else
        print_error "Nix is not installed"
    fi
    echo ""

    # Check darwin-rebuild
    print_step "2/7" "Checking nix-darwin"
    if command -v darwin-rebuild &>/dev/null; then
        print_success "nix-darwin is installed"
    else
        print_error "nix-darwin is not installed"
    fi
    echo ""

    # Check configuration
    print_step "3/7" "Validating configuration"
    cd "$CONFIG_DIR" 2>/dev/null || { print_error "Config directory not found"; return 1; }
    if make check &>/dev/null; then
        print_success "Configuration is valid"
    else
        print_warn "Configuration may have errors (run 'make check' for details)"
    fi
    echo ""

    # Check 1Password SSH
    print_step "4/7" "Checking 1Password SSH agent"
    local onepass_socket="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
    if [ -S "$onepass_socket" ]; then
        print_success "1Password SSH agent is available"
        if ssh-add -l &>/dev/null; then
            local key_count=$(ssh-add -l 2>/dev/null | wc -l | tr -d ' ')
            print_info "Keys available: $key_count"
        fi
    else
        print_warn "1Password SSH agent not found"
    fi
    echo ""

    # Check Homebrew
    print_step "5/7" "Checking Homebrew"
    if command -v brew &>/dev/null; then
        print_success "Homebrew is installed"
        local outdated=$(brew outdated 2>/dev/null | wc -l | tr -d ' ')
        if [ "$outdated" -gt 0 ]; then
            print_info "Outdated packages: $outdated"
        fi
    else
        print_warn "Homebrew is not installed"
    fi
    echo ""

    # Check disk space
    print_step "6/7" "Checking disk space"
    local available=$(df -h / | tail -1 | awk '{print $4}')
    print_info "Available space: $available"
    local store_size=$(du -sh /nix/store 2>/dev/null | cut -f1 || echo "unknown")
    print_info "Nix store size: $store_size"
    echo ""

    # Check for common issues
    print_step "7/7" "Common issues"
    local issues_found=0

    # Check for dirty git state
    if [ -d "$CONFIG_DIR/.git" ]; then
        cd "$CONFIG_DIR"
        if ! git diff --quiet HEAD 2>/dev/null; then
            print_warn "Uncommitted changes in configuration"
            issues_found=$((issues_found + 1))
        fi
    fi

    # Check nix daemon
    if ! pgrep nix-daemon &>/dev/null; then
        print_warn "Nix daemon may not be running"
        issues_found=$((issues_found + 1))
    fi

    if [ $issues_found -eq 0 ]; then
        print_success "No common issues detected"
    fi
    echo ""

    print_header "Diagnostics Complete"
}

cmd_list() {
    print_header "Installed Packages"
    echo ""

    print_step "1/2" "Homebrew Casks"
    if command -v brew &>/dev/null; then
        brew list --cask 2>/dev/null | while read cask; do
            echo "  ${CYAN}•${NC} $cask"
        done
    else
        print_warn "Homebrew not installed"
    fi
    echo ""

    print_step "2/2" "Nix Packages"
    if command -v nix-env &>/dev/null; then
        nix-env -q 2>/dev/null | while read pkg; do
            echo "  ${CYAN}•${NC} $pkg"
        done
    else
        print_warn "Nix not installed"
    fi
}

# Main command router
case "${1:-help}" in
    setup)
        source "$LIB_DIR/wizard.sh"
        run_setup_wizard "$CONFIG_DIR"
        ;;
    add)
        shift
        type="$1"
        shift
        case "$type" in
            app) cmd_add_app "$@" ;;
            tool) cmd_add_tool "$@" ;;
            *) print_error "Unknown type: $type"; show_help; exit 1 ;;
        esac
        ;;
    remove)
        print_warn "Remove functionality coming soon"
        ;;
    customize) cmd_customize ;;
    switch) cmd_switch ;;
    update) cmd_update ;;
    status) cmd_status ;;
    doctor) cmd_doctor ;;
    list) cmd_list ;;
    help|--help|-h) show_help ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/../lib"

# Source libraries
source "$LIB_DIR/ui.sh"
source "$LIB_DIR/config-builder.sh" 2>/dev/null || true

CONFIG_DIR="${HOME}/.config/nixpkgs"

show_help() {
    print_header "nix-me - Nix Configuration Manager"
    cat << EOF
Usage: nix-me <command> [options]

Commands:
  setup              Run interactive setup wizard
  add <type> <name>  Add packages or features
  remove <type> <name> Remove packages or features
  customize          Interactive customization menu
  switch             Apply configuration changes
  update             Update packages
  status             Show system status
  doctor             Diagnose configuration issues
  list               List installed packages

Package Types:
  app <name>         GUI application (Homebrew cask)
  tool <name>        CLI tool (Nix package)

Examples:
  nix-me add app spotify
  nix-me add tool jq
  nix-me customize
  nix-me switch
  nix-me doctor

For more help: nix-me <command> --help
EOF
}

cmd_add_app() {
    local app_name="$1"

    if [ -z "$app_name" ]; then
        print_error "Please specify an app name"
        echo "Usage: nix-me add app <name>"
        return 1
    fi

    print_header "Adding GUI Application"
    print_info "Searching for: $app_name"

    # Check if Homebrew is available
    if ! command -v brew &>/dev/null; then
        print_error "Homebrew is not installed"
        return 1
    fi

    # Search Homebrew
    print_info "Searching Homebrew casks..."
    local results=$(brew search --cask "$app_name" 2>/dev/null | grep -v "==>" | head -10)

    if [ -z "$results" ]; then
        print_error "No applications found matching '$app_name'"
        return 1
    fi

    echo ""
    echo "Found applications:"
    local apps_array=()
    local index=1
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            apps_array+=("$line")
            echo "  ${CYAN}${index}${NC}) $line"
            ((index++))
        fi
    done <<< "$results"
    echo "  ${CYAN}0${NC}) Cancel"
    echo ""

    read -p "Select application [0-${#apps_array[@]}]: " selection

    if [ "$selection" -eq 0 ] || [ -z "$selection" ]; then
        print_info "Cancelled"
        return 0
    fi

    if [ "$selection" -lt 1 ] || [ "$selection" -gt "${#apps_array[@]}" ]; then
        print_error "Invalid selection"
        return 1
    fi

    local selected_app="${apps_array[$((selection-1))]}"

    # Add to configuration
    print_info "Adding $selected_app to configuration..."
    echo ""
    print_warn "To add this app, edit:"
    echo "  ${CYAN}$CONFIG_DIR/modules/darwin/homebrew.nix${NC}"
    echo ""
    echo "Add to the casks array:"
    echo "  ${GREEN}\"$selected_app\"${NC}"
    echo ""

    if ask_yes_no "Open homebrew.nix in editor?" "y"; then
        ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/homebrew.nix"
    fi

    echo ""
    if ask_yes_no "Apply changes now?" "y"; then
        cmd_switch
    else
        print_info "Run 'nix-me switch' when ready to apply changes"
    fi
}

cmd_add_tool() {
    local tool_name="$1"

    if [ -z "$tool_name" ]; then
        print_error "Please specify a tool name"
        echo "Usage: nix-me add tool <name>"
        return 1
    fi

    print_header "Adding CLI Tool"
    print_info "Tool: $tool_name"
    echo ""
    print_warn "To add this tool, edit:"
    echo "  ${CYAN}$CONFIG_DIR/modules/darwin/apps.nix${NC}"
    echo ""
    echo "Add to systemPackages:"
    echo "  ${GREEN}$tool_name${NC}"
    echo ""

    if ask_yes_no "Open apps.nix in editor?" "y"; then
        ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/apps.nix"
    fi

    echo ""
    if ask_yes_no "Apply changes now?" "y"; then
        cmd_switch
    else
        print_info "Run 'nix-me switch' when ready to apply changes"
    fi
}

cmd_customize() {
    while true; do
        clear
        print_header "Customization Menu"

        echo "What would you like to customize?"
        echo ""
        echo "  ${CYAN}1${NC}) Add GUI applications"
        echo "  ${CYAN}2${NC}) Add CLI tools"
        echo "  ${CYAN}3${NC}) Edit Fish shell config"
        echo "  ${CYAN}4${NC}) Edit system preferences"
        echo "  ${CYAN}5${NC}) Edit Homebrew config"
        echo "  ${CYAN}6${NC}) Review current configuration"
        echo "  ${CYAN}7${NC}) Apply changes and exit"
        echo "  ${CYAN}0${NC}) Exit without applying"
        echo ""

        read -p "Choice: " choice

        case $choice in
            1)
                echo ""
                read -p "Enter app name to search: " app_name
                cmd_add_app "$app_name"
                read -p "Press Enter to continue..."
                ;;
            2)
                echo ""
                read -p "Enter tool name: " tool_name
                cmd_add_tool "$tool_name"
                read -p "Press Enter to continue..."
                ;;
            3)
                ${EDITOR:-nano} "$CONFIG_DIR/modules/home-manager/fish.nix"
                ;;
            4)
                ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/system.nix"
                ;;
            5)
                ${EDITOR:-nano} "$CONFIG_DIR/modules/darwin/homebrew.nix"
                ;;
            6)
                cmd_status
                read -p "Press Enter to continue..."
                ;;
            7)
                echo ""
                if ask_yes_no "Apply configuration changes now?" "y"; then
                    cmd_switch
                fi
                break
                ;;
            0) break ;;
            *) print_error "Invalid choice" ;;
        esac
    done
}

cmd_switch() {
    print_header "Applying Configuration"
    cd "$CONFIG_DIR" || exit 1

    print_info "Building configuration..."
    if make switch; then
        print_success "Configuration applied successfully!"
    else
        print_error "Failed to apply configuration"
        return 1
    fi
}

cmd_update() {
    print_header "Updating System"
    cd "$CONFIG_DIR" || exit 1

    print_info "Updating flake inputs..."
    nix flake update

    echo ""
    if ask_yes_no "Apply updates now?" "y"; then
        cmd_switch
    else
        print_info "Run 'nix-me switch' to apply updates later"
    fi
}

cmd_status() {
    clear
    print_header "System Status"
    echo ""

    print_step "1/5" "Configuration Location"
    if [ -d "$CONFIG_DIR" ]; then
        print_success "Configuration found at: $CONFIG_DIR"
        local branch=$(cd "$CONFIG_DIR" && git branch --show-current 2>/dev/null)
        print_info "Git branch: ${branch:-unknown}"
    else
        print_error "Configuration not found at: $CONFIG_DIR"
    fi
    echo ""

    print_step "2/5" "Nix Generation"
    local current_gen=$(darwin-rebuild --list-generations 2>/dev/null | tail -1 || echo "unknown")
    print_info "Current: $current_gen"
    echo ""

    print_step "3/5" "Nix Store"
    local store_size=$(du -sh /nix/store 2>/dev/null | cut -f1 || echo "unknown")
    print_info "Nix store size: $store_size"
    echo ""

    print_step "4/5" "Installed Packages"
    local brew_count=$(brew list --cask 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    local nix_count=$(nix-env -q 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    print_info "Homebrew casks: $brew_count"
    print_info "Nix packages: $nix_count"
    echo ""

    print_step "5/5" "Recent Changes"
    if [ -d "$CONFIG_DIR/.git" ]; then
        cd "$CONFIG_DIR"
        local last_commit=$(git log -1 --oneline 2>/dev/null || echo "No commits")
        print_info "Last commit: $last_commit"
    fi
}

cmd_doctor() {
    print_header "System Diagnostics"
    echo ""

    # Check Nix installation
    print_step "1/7" "Checking Nix installation"
    if command -v nix &>/dev/null; then
        local nix_version=$(nix --version 2>/dev/null || echo "unknown")
        print_success "Nix is installed: $nix_version"
    else
        print_error "Nix is not installed"
    fi
    echo ""

    # Check darwin-rebuild
    print_step "2/7" "Checking nix-darwin"
    if command -v darwin-rebuild &>/dev/null; then
        print_success "nix-darwin is installed"
    else
        print_error "nix-darwin is not installed"
    fi
    echo ""

    # Check configuration
    print_step "3/7" "Validating configuration"
    cd "$CONFIG_DIR" 2>/dev/null || { print_error "Config directory not found"; return 1; }
    if make check &>/dev/null; then
        print_success "Configuration is valid"
    else
        print_warn "Configuration may have errors (run 'make check' for details)"
    fi
    echo ""

    # Check 1Password SSH
    print_step "4/7" "Checking 1Password SSH agent"
    local onepass_socket="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
    if [ -S "$onepass_socket" ]; then
        print_success "1Password SSH agent is available"
        if ssh-add -l &>/dev/null; then
            local key_count=$(ssh-add -l 2>/dev/null | wc -l | tr -d ' ')
            print_info "Keys available: $key_count"
        fi
    else
        print_warn "1Password SSH agent not found"
    fi
    echo ""

    # Check Homebrew
    print_step "5/7" "Checking Homebrew"
    if command -v brew &>/dev/null; then
        print_success "Homebrew is installed"
        local outdated=$(brew outdated 2>/dev/null | wc -l | tr -d ' ')
        if [ "$outdated" -gt 0 ]; then
            print_info "Outdated packages: $outdated"
        fi
    else
        print_warn "Homebrew is not installed"
    fi
    echo ""

    # Check disk space
    print_step "6/7" "Checking disk space"
    local available=$(df -h / | tail -1 | awk '{print $4}')
    print_info "Available space: $available"
    local store_size=$(du -sh /nix/store 2>/dev/null | cut -f1 || echo "unknown")
    print_info "Nix store size: $store_size"
    echo ""

    # Check for common issues
    print_step "7/7" "Common issues"
    local issues_found=0

    # Check for dirty git state
    if [ -d "$CONFIG_DIR/.git" ]; then
        cd "$CONFIG_DIR"
        if ! git diff --quiet HEAD 2>/dev/null; then
            print_warn "Uncommitted changes in configuration"
            issues_found=$((issues_found + 1))
        fi
    fi

    # Check nix daemon
    if ! pgrep nix-daemon &>/dev/null; then
        print_warn "Nix daemon may not be running"
        issues_found=$((issues_found + 1))
    fi

    if [ $issues_found -eq 0 ]; then
        print_success "No common issues detected"
    fi
    echo ""

    print_header "Diagnostics Complete"
}

cmd_list() {
    print_header "Installed Packages"
    echo ""

    print_step "1/2" "Homebrew Casks"
    if command -v brew &>/dev/null; then
        brew list --cask 2>/dev/null | while read cask; do
            echo "  ${CYAN}•${NC} $cask"
        done
    else
        print_warn "Homebrew not installed"
    fi
    echo ""

    print_step "2/2" "Nix Packages"
    if command -v nix-env &>/dev/null; then
        nix-env -q 2>/dev/null | while read pkg; do
            echo "  ${CYAN}•${NC} $pkg"
        done
    else
        print_warn "Nix not installed"
    fi
}

# Main command router
case "${1:-help}" in
    setup)
        source "$LIB_DIR/wizard.sh"
        run_setup_wizard
        ;;
    add)
        shift
        type="$1"
        shift
        case "$type" in
            app) cmd_add_app "$@" ;;
            tool) cmd_add_tool "$@" ;;
            *) print_error "Unknown type: $type"; show_help; exit 1 ;;
        esac
        ;;
    remove)
        print_warn "Remove functionality coming soon"
        ;;
    customize) cmd_customize ;;
    switch) cmd_switch ;;
    update) cmd_update ;;
    status) cmd_status ;;
    doctor) cmd_doctor ;;
    list) cmd_list ;;
    help|--help|-h) show_help ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
