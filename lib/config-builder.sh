#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/ui.sh"

generate_machine_config() {
    local hostname="$1"
    local machine_type="$2"
    local machine_name="$3"
    local username="$4"
    local repo_dir="${5:-${HOME}/.config/nixpkgs}"
    local modify_only="${6:-0}"

    if [ "$modify_only" == "1" ]; then
        print_info "Modifying existing machine: $hostname"
        print_success "Configuration modifications require manual application"
        print_info "Run 'make switch' to apply changes"
        return 0
    fi

    print_info "Generating configuration for $hostname..."

    # Create machine-specific directory
    local host_dir="$repo_dir/hosts/$hostname"

    if [ -d "$host_dir" ]; then
        print_warn "Host directory already exists: $host_dir"
        if ! ask_yes_no "Overwrite existing configuration?" "n"; then
            print_info "Keeping existing configuration"
            return 0
        fi
    fi

    mkdir -p "$host_dir"

    # Write the host-specific config
    cat > "$host_dir/default.nix" << EOF
{ config, pkgs, lib, ... }:

{
  # Machine-specific configuration for $hostname
  # Generated by nix-me setup wizard

  # You can customize this machine's configuration here
  homebrew = {
    useBaseLists = true;

    # Add machine-specific apps
    casksToAdd = [
      # Add your apps here
    ];

    # Remove apps you don't need
    casksToRemove = [
      # List apps to remove
    ];
  };

  # System preferences
  system.defaults = {
    # Override settings here
  };
}
EOF

    print_success "Created host config: $host_dir/default.nix"

    # Update or create flake.nix entry
    update_flake_with_machine "$repo_dir" "$hostname" "$machine_type" "$machine_name" "$username"
}

update_flake_with_machine() {
    local repo_dir="$1"
    local hostname="$2"
    local machine_type="$3"
    local machine_name="$4"
    local username="$5"

    local flake_file="$repo_dir/flake.nix"

    # Check if machine already exists in flake
    if grep -q "\"$hostname\" =" "$flake_file"; then
        print_warn "Machine '$hostname' already exists in flake.nix"
        if ask_yes_no "Update existing entry?" "n"; then
            print_info "Manual update required in flake.nix"
        fi
        return 0
    fi

    # Create the machine definition
    local machine_def="      \"$hostname\" = mkDarwinSystem {
        hostname = \"$hostname\";
        machineType = \"$machine_type\";
        machineName = \"$machine_name\";
        username = \"$username\";
      };"

    # Show the user what needs to be added
    print_header "Flake Configuration"
    echo ""
    print_info "Add this to your flake.nix darwinConfigurations:"
    echo ""
    echo "$machine_def"
    echo ""

    # Try to add it automatically
    if ask_yes_no "Attempt to add automatically?" "y"; then
        # Create backup
        cp "$flake_file" "$flake_file.backup"
        print_info "Created backup: $flake_file.backup"

        # Find the darwinConfigurations section
        local config_line=$(grep -n "darwinConfigurations = {" "$flake_file" | cut -d: -f1)

        if [ -n "$config_line" ]; then
            # Find the closing brace (simple heuristic - assumes proper indentation)
            local end_line=$(tail -n +$config_line "$flake_file" | grep -n "^    };" | head -1 | cut -d: -f1)
            end_line=$((config_line + end_line - 1))

            # Insert the new machine before the closing brace
            {
                head -n $((end_line - 1)) "$flake_file"
                echo ""
                echo "$machine_def"
                tail -n +$end_line "$flake_file"
            } > "$flake_file.new"

            mv "$flake_file.new" "$flake_file"
            print_success "Added machine to flake.nix"
            print_info "Backup saved as: $flake_file.backup"
        else
            print_warn "Could not automatically update flake.nix"
            print_info "Please add the configuration manually"
            echo "$machine_def" > "$repo_dir/machine-config-$hostname.txt"
            print_info "Configuration saved to: machine-config-$hostname.txt"
        fi
    else
        # Save to file for manual addition
        echo "$machine_def" > "$repo_dir/machine-config-$hostname.txt"
        print_info "Configuration saved to: machine-config-$hostname.txt"
    fi
}

add_to_homebrew_casks() {
    local cask_name="$1"
    local config_file="${HOME}/.config/nixpkgs/modules/darwin/homebrew.nix"

    print_info "To add $cask_name:"
    print_warn "Edit: $config_file"
    print_info "Add \"$cask_name\" to the casks array"

    return 0
}

add_to_nix_packages() {
    local package_name="$1"
    local config_file="${HOME}/.config/nixpkgs/modules/darwin/apps.nix"

    print_info "To add $package_name:"
    print_warn "Edit: $config_file"
    print_info "Add '$package_name' to systemPackages"

    return 0
}
#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/ui.sh"

generate_machine_config() {
    local hostname="$1"
    local machine_type="$2"
    local machine_name="$3"
    local username="$4"
    local config_profile="${5:-standard}"

    local repo_dir="${HOME}/.config/nixpkgs"

    print_info "Generating configuration for $hostname..."

    # Update flake.nix with new machine
    update_flake_nix "$hostname" "$machine_type" "$machine_name" "$username"

    # Create host-specific directory if needed
    local host_dir="$repo_dir/hosts/$hostname"
    if [ ! -d "$host_dir" ]; then
        mkdir -p "$host_dir"
        create_host_config "$host_dir" "$config_profile"
    fi

    print_success "Configuration generated at $repo_dir"
}

update_flake_nix() {
    local hostname="$1"
    local machine_type="$2"
    local machine_name="$3"
    local username="$4"

    local repo_dir="${HOME}/.config/nixpkgs"
    local flake_file="$repo_dir/flake.nix"

    # Check if machine already exists
    if grep -q "\"$hostname\" =" "$flake_file"; then
        print_warn "Machine '$hostname' already exists in flake.nix"
        return 0
    fi

    # Create a temporary file with the new machine config
    local new_config="      \"$hostname\" = mkDarwinSystem {
        hostname = \"$hostname\";
        machineType = \"$machine_type\";
        machineName = \"$machine_name\";
        username = \"$username\";
      };"

    # Insert before the closing brace of darwinConfigurations
    # This is a simple approach - for production, use proper nix editing
    print_warn "Please manually add this to your flake.nix darwinConfigurations:"
    echo ""
    echo "$new_config"
    echo ""

    # For now, we'll just append to a temp file that user needs to integrate
    echo "$new_config" > "$repo_dir/new-machine-config.txt"
    print_info "Configuration saved to: $repo_dir/new-machine-config.txt"
}

create_host_config() {
    local host_dir="$1"
    local config_profile="$2"

    cat > "$host_dir/default.nix" << 'EOF'
{ config, pkgs, lib, ... }:

{
  # Host-specific customizations
  # Add your machine-specific packages and settings here

  homebrew = {
    # Inherit base configuration
    useBaseLists = true;

    # Add machine-specific apps
    casksToAdd = [
      # Add your apps here
    ];

    # Remove apps you don't need
    casksToRemove = [
      # List apps to remove from base config
    ];
  };

  # Machine-specific system preferences
  system.defaults = {
    # Override system settings here
  };
}
EOF

    print_success "Created host configuration at $host_dir/default.nix"
}

add_to_homebrew_casks() {
    local cask_name="$1"
    local config_file="${HOME}/.config/nixpkgs/modules/darwin/homebrew.nix"

    # Simple append - in production you'd want proper nix parsing
    print_info "Adding $cask_name to homebrew.nix"

    # For now, just tell the user
    print_warn "Please add \"$cask_name\" to your homebrew.nix casks list"

    return 0
}

add_to_nix_packages() {
    local package_name="$1"
    local config_file="${HOME}/.config/nixpkgs/modules/darwin/apps.nix"

    print_info "Adding $package_name to apps.nix"
    print_warn "Please add '$package_name' to your apps.nix systemPackages list"

    return 0
}
